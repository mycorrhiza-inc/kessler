// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: attachment_text.sql

package dbstore

import (
	"context"

	"github.com/google/uuid"
)

const attachmentTextCreate = `-- name: AttachmentTextCreate :one
INSERT INTO
    public.attachment_text_source (
        attachment_id,
        is_original_text,
        language,
        text,
        created_at,
        updated_at
    )
VALUES
    ($1, $2, $3, $4, NOW(), NOW())
RETURNING
    id
`

type AttachmentTextCreateParams struct {
	AttachmentID   uuid.UUID
	IsOriginalText bool
	Language       string
	Text           string
}

func (q *Queries) AttachmentTextCreate(ctx context.Context, arg AttachmentTextCreateParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, attachmentTextCreate,
		arg.AttachmentID,
		arg.IsOriginalText,
		arg.Language,
		arg.Text,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const attachmentTextDelete = `-- name: AttachmentTextDelete :exec
DELETE FROM
    public.attachment_text_source
WHERE
    attachment_id = $1
`

func (q *Queries) AttachmentTextDelete(ctx context.Context, attachmentID uuid.UUID) error {
	_, err := q.db.Exec(ctx, attachmentTextDelete, attachmentID)
	return err
}

const attachmentTextList = `-- name: AttachmentTextList :many
SELECT
    id, attachment_id, is_original_text, language, text, created_at, updated_at
FROM
    public.attachment_text_source
WHERE
    attachment_id = $1
`

func (q *Queries) AttachmentTextList(ctx context.Context, attachmentID uuid.UUID) ([]AttachmentTextSource, error) {
	rows, err := q.db.Query(ctx, attachmentTextList, attachmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AttachmentTextSource
	for rows.Next() {
		var i AttachmentTextSource
		if err := rows.Scan(
			&i.ID,
			&i.AttachmentID,
			&i.IsOriginalText,
			&i.Language,
			&i.Text,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const attachmentTextListByFileId = `-- name: AttachmentTextListByFileId :many
SELECT
    ats.id, ats.attachment_id, ats.is_original_text, ats.language, ats.text, ats.created_at, ats.updated_at
FROM
    public.attachment_text_source ats
    JOIN public.attachment a ON a.id = ats.attachment_id
WHERE
    a.file_id = $1
`

func (q *Queries) AttachmentTextListByFileId(ctx context.Context, fileID uuid.UUID) ([]AttachmentTextSource, error) {
	rows, err := q.db.Query(ctx, attachmentTextListByFileId, fileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AttachmentTextSource
	for rows.Next() {
		var i AttachmentTextSource
		if err := rows.Scan(
			&i.ID,
			&i.AttachmentID,
			&i.IsOriginalText,
			&i.Language,
			&i.Text,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const attachmentTextListByFileIdAndLanguage = `-- name: AttachmentTextListByFileIdAndLanguage :many
SELECT
    ats.id, ats.attachment_id, ats.is_original_text, ats.language, ats.text, ats.created_at, ats.updated_at
FROM
    public.attachment_text_source ats
    JOIN public.attachment a ON a.id = ats.attachment_id
WHERE
    a.file_id = $1
    AND ats.language = $2
`

type AttachmentTextListByFileIdAndLanguageParams struct {
	FileID   uuid.UUID
	Language string
}

func (q *Queries) AttachmentTextListByFileIdAndLanguage(ctx context.Context, arg AttachmentTextListByFileIdAndLanguageParams) ([]AttachmentTextSource, error) {
	rows, err := q.db.Query(ctx, attachmentTextListByFileIdAndLanguage, arg.FileID, arg.Language)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AttachmentTextSource
	for rows.Next() {
		var i AttachmentTextSource
		if err := rows.Scan(
			&i.ID,
			&i.AttachmentID,
			&i.IsOriginalText,
			&i.Language,
			&i.Text,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const attachmentTextListByLanguage = `-- name: AttachmentTextListByLanguage :many
SELECT
    id, attachment_id, is_original_text, language, text, created_at, updated_at
FROM
    public.attachment_text_source
WHERE
    attachment_id = $1
    AND language = $2
`

type AttachmentTextListByLanguageParams struct {
	AttachmentID uuid.UUID
	Language     string
}

func (q *Queries) AttachmentTextListByLanguage(ctx context.Context, arg AttachmentTextListByLanguageParams) ([]AttachmentTextSource, error) {
	rows, err := q.db.Query(ctx, attachmentTextListByLanguage, arg.AttachmentID, arg.Language)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AttachmentTextSource
	for rows.Next() {
		var i AttachmentTextSource
		if err := rows.Scan(
			&i.ID,
			&i.AttachmentID,
			&i.IsOriginalText,
			&i.Language,
			&i.Text,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const attachmentTextListOriginal = `-- name: AttachmentTextListOriginal :many
SELECT
    id, attachment_id, is_original_text, language, text, created_at, updated_at
FROM
    public.attachment_text_source
WHERE
    attachment_id = $1
    AND is_original_text = TRUE
`

func (q *Queries) AttachmentTextListOriginal(ctx context.Context, attachmentID uuid.UUID) ([]AttachmentTextSource, error) {
	rows, err := q.db.Query(ctx, attachmentTextListOriginal, attachmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AttachmentTextSource
	for rows.Next() {
		var i AttachmentTextSource
		if err := rows.Scan(
			&i.ID,
			&i.AttachmentID,
			&i.IsOriginalText,
			&i.Language,
			&i.Text,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
