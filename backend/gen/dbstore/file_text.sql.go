// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: file_text.sql

package dbstore

import (
	"context"

	"github.com/google/uuid"
)

const createFileTextSource = `-- name: CreateFileTextSource :one
INSERT INTO
    public.file_text_source (
        file_id,
        is_original_text,
        language,
        text,
        created_at,
        updated_at
    )
VALUES
    ($1, $2, $3, $4, NOW(), NOW())
RETURNING
    id
`

type CreateFileTextSourceParams struct {
	FileID         uuid.UUID
	IsOriginalText bool
	Language       string
	Text           string
}

func (q *Queries) CreateFileTextSource(ctx context.Context, arg CreateFileTextSourceParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createFileTextSource,
		arg.FileID,
		arg.IsOriginalText,
		arg.Language,
		arg.Text,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteFileTexts = `-- name: DeleteFileTexts :exec
DELETE FROM
    public.file_text_source
WHERE
    file_id = $1
`

func (q *Queries) DeleteFileTexts(ctx context.Context, fileID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteFileTexts, fileID)
	return err
}

const listTextsOfFile = `-- name: ListTextsOfFile :many
SELECT
    file_id, is_original_text, language, text, id, created_at, updated_at
FROM
    public.file_text_source
WHERE
    file_id = $1
`

func (q *Queries) ListTextsOfFile(ctx context.Context, fileID uuid.UUID) ([]FileTextSource, error) {
	rows, err := q.db.Query(ctx, listTextsOfFile, fileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FileTextSource
	for rows.Next() {
		var i FileTextSource
		if err := rows.Scan(
			&i.FileID,
			&i.IsOriginalText,
			&i.Language,
			&i.Text,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTextsOfFileOriginal = `-- name: ListTextsOfFileOriginal :many
SELECT
    file_id, is_original_text, language, text, id, created_at, updated_at
FROM
    public.file_text_source
WHERE
    file_id = $1
    AND is_original_text = TRUE
`

func (q *Queries) ListTextsOfFileOriginal(ctx context.Context, fileID uuid.UUID) ([]FileTextSource, error) {
	rows, err := q.db.Query(ctx, listTextsOfFileOriginal, fileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FileTextSource
	for rows.Next() {
		var i FileTextSource
		if err := rows.Scan(
			&i.FileID,
			&i.IsOriginalText,
			&i.Language,
			&i.Text,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTextsOfFileWithLanguage = `-- name: ListTextsOfFileWithLanguage :many
SELECT
    file_id, is_original_text, language, text, id, created_at, updated_at
FROM
    public.file_text_source
WHERE
    file_id = $1
    AND language = $2
`

type ListTextsOfFileWithLanguageParams struct {
	FileID   uuid.UUID
	Language string
}

func (q *Queries) ListTextsOfFileWithLanguage(ctx context.Context, arg ListTextsOfFileWithLanguageParams) ([]FileTextSource, error) {
	rows, err := q.db.Query(ctx, listTextsOfFileWithLanguage, arg.FileID, arg.Language)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FileTextSource
	for rows.Next() {
		var i FileTextSource
		if err := rows.Scan(
			&i.FileID,
			&i.IsOriginalText,
			&i.Language,
			&i.Text,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
