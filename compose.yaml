# local development docker compose
x-common-env: &common-env
  # OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT}
  # VERSION_HASH: ${VERSION_HASH}
  # DOMAIN: ${DOMAIN}
  NEXT_PUBLIC_KESSLER_API_URL: http://localhost/v2/
  NEXT_PUBLIC_NIGHTLY_KESSLER_API_URL: http://localhost/v2/
  INTERNAL_KESSLER_API_URL: http://backend-server:4041
  INTERNAL_REDIS_ADDRESS: valkey:6379
  NEXT_PUBLIC_POSTHOG_KEY: phc_cVPgPQClX1eOAqljibZU4udCoBngUHXuS8mUb0UGxyX
  NEXT_PUBLIC_POSTHOG_HOST: https://us.i.posthog.com

services:
  # Main Services
  frontend:
    build:
      context: ./frontend
      dockerfile: ./dev.Dockerfile
    env_file:
      - config/global.env
    environment:
      <<: *common-env
    volumes:
      - ./frontend/src/:/app/src
    labels:
      - "traefik.enable=true"
      - "traefik.namespace=kessler"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
      - "traefik.http.routers.frontend.service=frontend"
    ports:
      - 3003:3000
    expose:
      - 3000
    command:
      - "pnpm"
      - "run"
      - "dev"

  fugudb:
    build:
      dockerfile: Dockerfile
      context: ./fugu
    develop:
      watch:
        - action: rebuild
          path: ./fugu/Cargo.toml
          target: .
        - action: rebuild
          path: ./fugu/src
          target: .
    environment:
      <<: *common-env
    env_file:
      - ./config/global.env
    volumes:
      - ./data/fugu_db:/app/fugu_db
    working_dir: /app
    expose:
      - 3301
    ports:
      - 3301:3301
    labels:
      - "traefik.enable=true"
      - "traefik.namespace=kessler"
      - "traefik.http.routers.fugu.rule=PathPrefix(`/fugu`)"
      - "traefik.http.middlewares.fugu-stripprefix.stripprefix.prefixes=/fugu"
      - "traefik.http.routers.fugu.middlewares=fugu-stripprefix"
      - "traefik.http.services.fugu.loadbalancer.server.port=3301"
      - "traefik.http.routers.fugu.service=fugu"

  backend-ingest:
    build:
      dockerfile: dev.ingest.Dockerfile
      context: ./backend
    command: go run /app/cmd/ingest/main.go
    develop:
      watch:
        - action: rebuild
          path: ./backend
          target: .
    environment:
      <<: *common-env
    env_file:
      - ./config/global.env
    volumes:
      - ./backend:/app
    working_dir: /app
    expose:
      - 4042
    ports:
      - 4042:4042
    labels:
      - "traefik.enable=true"
      - "traefik.namespace=kessler"
      - "traefik.http.routers.ingest.rule=PathPrefix(`/ingest_v1`)"

  backend-server:
    build:
      context: ./backend
      dockerfile: dev.server.Dockerfile
    command: go run /app/cmd/server/main.go
    develop:
      watch:
        - action: rebuild
          path: ./backend/
          target: .
    env_file:
      - ./config/global.env
    environment:
      <<: *common-env
    expose:
      - 4041
    ports:
      - 4041:4041
    labels:
      - "traefik.enable=true"
      - "traefik.namespace=kessler"
      - "traefik.http.routers.backend.rule=PathPrefix(`/v2`)"
      - "traefik.http.middlewares.backend-stripprefix.stripprefix.prefixes=/v2"
      - "traefik.http.routers.backend.middlewares=backend-stripprefix"
      - "traefik.http.services.backend.loadbalancer.server.port=4041"
      - "traefik.http.routers.backend.service=backend"

  # Misc Services
  reverse-proxy:
    image: traefik:v3.4.0
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.constraints=Label(`traefik.namespace`,`kessler`)"
      # - "--log.level=DEBUG"
    expose:
      - 80
      - 443
    ports:
      - "80:80"
      - "${PROXY_UI_PORT:-8083}:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  cache:
    image: memcached:1.6.37-alpine
    command: --conn-limit=1024
      --memory-limit=64
      --threads=2
    restart: always
    ports:
      - "11211:11211"
    expose:
      - 11211
  valkey:
    hostname: valkey
    image: valkey/valkey:8-alpine
    volumes:
      - ./volumes/valkey.conf:/etc/valkey/valkey.conf
      - ./volumes/valkey-data:/data
    command: valkey-server /etc/valkey/valkey.conf
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    expose:
      - 6379
# include:
#   - ./backend/backend.compose.yaml
