// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: semi_complete_file.sql

package dbstore

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getFileWithMetadata = `-- name: GetFileWithMetadata :one
SELECT public.file.id,
    public.file.name,
    public.file.extension,
    public.file.lang,
    public.file.verified,
    public.file.hash,
    public.file.isPrivate,
    public.file.created_at,
    public.file.updated_at,
    public.file_metadata.mdata
FROM public.file
    LEFT JOIN public.file_metadata ON public.file.id = public.file_metadata.id
WHERE public.file.id = $1
`

type GetFileWithMetadataRow struct {
	ID        pgtype.UUID
	Name      pgtype.Text
	Extension pgtype.Text
	Lang      pgtype.Text
	Verified  pgtype.Bool
	Hash      pgtype.Text
	Isprivate pgtype.Bool
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	Mdata     []byte
}

func (q *Queries) GetFileWithMetadata(ctx context.Context, id pgtype.UUID) (GetFileWithMetadataRow, error) {
	row := q.db.QueryRow(ctx, getFileWithMetadata, id)
	var i GetFileWithMetadataRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Extension,
		&i.Lang,
		&i.Verified,
		&i.Hash,
		&i.Isprivate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Mdata,
	)
	return i, err
}

const semiCompleteFileGet = `-- name: SemiCompleteFileGet :many
SELECT 
    f.id,
    f.name,
    f.extension,
    f.lang,
    f.verified,
    f.hash,
    f.created_at,
    f.updated_at,
    fm.mdata,
    fe.extra_obj,
    dd.docket_id as docket_uuid,
    org.id as organization_id,
    org.name as organization_name
FROM public.file f
    LEFT JOIN public.file_metadata fm ON f.id = fm.id
    LEFT JOIN public.file_extras fe ON f.id = fe.id
    LEFT JOIN public.docket_documents dd ON f.id = dd.document_id
    LEFT JOIN public.relation_documents_organizations_authorship rdoa ON f.id = rdoa.document_id
    LEFT JOIN public.organization org ON rdoa.organization_id = org.id
WHERE f.id = $1
`

type SemiCompleteFileGetRow struct {
	ID               pgtype.UUID
	Name             pgtype.Text
	Extension        pgtype.Text
	Lang             pgtype.Text
	Verified         pgtype.Bool
	Hash             pgtype.Text
	CreatedAt        pgtype.Timestamptz
	UpdatedAt        pgtype.Timestamptz
	Mdata            []byte
	ExtraObj         []byte
	DocketUuid       pgtype.UUID
	OrganizationID   pgtype.UUID
	OrganizationName pgtype.Text
}

func (q *Queries) SemiCompleteFileGet(ctx context.Context, id pgtype.UUID) ([]SemiCompleteFileGetRow, error) {
	rows, err := q.db.Query(ctx, semiCompleteFileGet, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SemiCompleteFileGetRow
	for rows.Next() {
		var i SemiCompleteFileGetRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Extension,
			&i.Lang,
			&i.Verified,
			&i.Hash,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Mdata,
			&i.ExtraObj,
			&i.DocketUuid,
			&i.OrganizationID,
			&i.OrganizationName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
