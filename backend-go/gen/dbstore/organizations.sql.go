// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: organizations.sql

package dbstore

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO public.organization (
		name,
		description,
		created_at,
		updated_at
	)
VALUES ($1, $2, NOW(), NOW())
RETURNING id
`

type CreateOrganizationParams struct {
	Name        string
	Description sql.NullString
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createOrganization, arg.Name, arg.Description)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteOrganization = `-- name: DeleteOrganization :exec
DELETE FROM public.organization
WHERE id = $1
`

func (q *Queries) DeleteOrganization(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOrganization, id)
	return err
}

const listOrganizations = `-- name: ListOrganizations :many
SELECT name, description, id, created_at, updated_at
FROM public.organization
ORDER BY created_at DESC
`

func (q *Queries) ListOrganizations(ctx context.Context) ([]Organization, error) {
	rows, err := q.db.QueryContext(ctx, listOrganizations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.Name,
			&i.Description,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readOrganization = `-- name: ReadOrganization :one
SELECT name, description, id, created_at, updated_at
FROM public.organization
WHERE id = $1
`

func (q *Queries) ReadOrganization(ctx context.Context, id uuid.UUID) (Organization, error) {
	row := q.db.QueryRowContext(ctx, readOrganization, id)
	var i Organization
	err := row.Scan(
		&i.Name,
		&i.Description,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOrganization = `-- name: UpdateOrganization :one
UPDATE public.organization
SET name = $1,
	description = $2,
	updated_at = NOW()
WHERE id = $3
RETURNING id
`

type UpdateOrganizationParams struct {
	Name        string
	Description sql.NullString
	ID          uuid.UUID
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateOrganization, arg.Name, arg.Description, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateOrganizationDescription = `-- name: UpdateOrganizationDescription :one
UPDATE public.organization
SET description = $1,
	updated_at = NOW()
WHERE id = $2
RETURNING id
`

type UpdateOrganizationDescriptionParams struct {
	Description sql.NullString
	ID          uuid.UUID
}

func (q *Queries) UpdateOrganizationDescription(ctx context.Context, arg UpdateOrganizationDescriptionParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateOrganizationDescription, arg.Description, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateOrganizationName = `-- name: UpdateOrganizationName :one
UPDATE public.organization
SET name = $1,
	updated_at = NOW()
WHERE id = $2
RETURNING id
`

type UpdateOrganizationNameParams struct {
	Name string
	ID   uuid.UUID
}

func (q *Queries) UpdateOrganizationName(ctx context.Context, arg UpdateOrganizationNameParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateOrganizationName, arg.Name, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
