// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: organizations.sql

package dbstore

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const authorshipDocumentDeleteAll = `-- name: AuthorshipDocumentDeleteAll :exec
DELETE FROM public.relation_documents_organizations_authorship
WHERE document_id = $1
`

func (q *Queries) AuthorshipDocumentDeleteAll(ctx context.Context, documentID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, authorshipDocumentDeleteAll, documentID)
	return err
}

const authorshipDocumentOrganizationInsert = `-- name: AuthorshipDocumentOrganizationInsert :one
INSERT INTO public.relation_documents_organizations_authorship (
		document_id,
		organization_id,
    is_primary_author,
		created_at,
		updated_at
	)
VALUES ($1, $2, $3, NOW(), NOW())
RETURNING id
`

type AuthorshipDocumentOrganizationInsertParams struct {
	DocumentID      pgtype.UUID
	OrganizationID  pgtype.UUID
	IsPrimaryAuthor pgtype.Bool
}

func (q *Queries) AuthorshipDocumentOrganizationInsert(ctx context.Context, arg AuthorshipDocumentOrganizationInsertParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, authorshipDocumentOrganizationInsert, arg.DocumentID, arg.OrganizationID, arg.IsPrimaryAuthor)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const authorshipOrganizationListDocuments = `-- name: AuthorshipOrganizationListDocuments :many
SELECT document_id, organization_id, id, created_at, updated_at, is_primary_author 
FROM public.relation_documents_organizations_authorship 
WHERE organization_id = $1
`

func (q *Queries) AuthorshipOrganizationListDocuments(ctx context.Context, organizationID pgtype.UUID) ([]RelationDocumentsOrganizationsAuthorship, error) {
	rows, err := q.db.Query(ctx, authorshipOrganizationListDocuments, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RelationDocumentsOrganizationsAuthorship
	for rows.Next() {
		var i RelationDocumentsOrganizationsAuthorship
		if err := rows.Scan(
			&i.DocumentID,
			&i.OrganizationID,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsPrimaryAuthor,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO public.organization (
		name,
		description,
    is_person,
		created_at,
		updated_at
	)
VALUES ($1, $2, $3, NOW(), NOW())
RETURNING id
`

type CreateOrganizationParams struct {
	Name        string
	Description pgtype.Text
	IsPerson    pgtype.Bool
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createOrganization, arg.Name, arg.Description, arg.IsPerson)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const organizationDelete = `-- name: OrganizationDelete :exec
DELETE FROM public.organization
WHERE id = $1
`

func (q *Queries) OrganizationDelete(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, organizationDelete, id)
	return err
}

const organizationFetchByNameMatch = `-- name: OrganizationFetchByNameMatch :many
SELECT name, description, id, created_at, updated_at, is_person
FROM public.organization
WHERE name = $1
`

func (q *Queries) OrganizationFetchByNameMatch(ctx context.Context, name string) ([]Organization, error) {
	rows, err := q.db.Query(ctx, organizationFetchByNameMatch, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.Name,
			&i.Description,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsPerson,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const organizationList = `-- name: OrganizationList :many
SELECT name, description, id, created_at, updated_at, is_person
FROM public.organization
ORDER BY created_at DESC
`

func (q *Queries) OrganizationList(ctx context.Context) ([]Organization, error) {
	rows, err := q.db.Query(ctx, organizationList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.Name,
			&i.Description,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsPerson,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const organizationRead = `-- name: OrganizationRead :one
SELECT name, description, id, created_at, updated_at, is_person
FROM public.organization
WHERE id = $1
`

func (q *Queries) OrganizationRead(ctx context.Context, id pgtype.UUID) (Organization, error) {
	row := q.db.QueryRow(ctx, organizationRead, id)
	var i Organization
	err := row.Scan(
		&i.Name,
		&i.Description,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsPerson,
	)
	return i, err
}

const organizationUpdate = `-- name: OrganizationUpdate :one
UPDATE public.organization
SET name = $1,
	description = $2,
  is_person = $3,
	updated_at = NOW()
WHERE id = $4
RETURNING id
`

type OrganizationUpdateParams struct {
	Name        string
	Description pgtype.Text
	IsPerson    pgtype.Bool
	ID          pgtype.UUID
}

func (q *Queries) OrganizationUpdate(ctx context.Context, arg OrganizationUpdateParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, organizationUpdate,
		arg.Name,
		arg.Description,
		arg.IsPerson,
		arg.ID,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}
