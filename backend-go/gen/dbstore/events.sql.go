// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: events.sql

package dbstore

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO public.event (
		date,
		name,
		description,
		created_at,
		updated_at
	)
VALUES ($1, $2, $3, NOW(), NOW())
RETURNING date, name, description, id, created_at, updated_at
`

type CreateEventParams struct {
	Date        sql.NullTime
	Name        sql.NullString
	Description sql.NullString
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent, arg.Date, arg.Name, arg.Description)
	var i Event
	err := row.Scan(
		&i.Date,
		&i.Name,
		&i.Description,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM public.event
WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, id)
	return err
}

const listEvents = `-- name: ListEvents :many
SELECT date, name, description, id, created_at, updated_at
FROM public.event
ORDER BY date DESC
`

func (q *Queries) ListEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.Date,
			&i.Name,
			&i.Description,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readEvent = `-- name: ReadEvent :one
SELECT date, name, description, id, created_at, updated_at
FROM public.event
WHERE id = $1
`

func (q *Queries) ReadEvent(ctx context.Context, id uuid.UUID) (Event, error) {
	row := q.db.QueryRowContext(ctx, readEvent, id)
	var i Event
	err := row.Scan(
		&i.Date,
		&i.Name,
		&i.Description,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE public.event
SET date = $1,
	name = $2,
	description = $3,
	updated_at = NOW()
WHERE id = $4
RETURNING id
`

type UpdateEventParams struct {
	Date        sql.NullTime
	Name        sql.NullString
	Description sql.NullString
	ID          uuid.UUID
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateEvent,
		arg.Date,
		arg.Name,
		arg.Description,
		arg.ID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateEventDate = `-- name: UpdateEventDate :one
UPDATE public.event
SET date = $1,
	updated_at = NOW()
WHERE id = $2
RETURNING id
`

type UpdateEventDateParams struct {
	Date sql.NullTime
	ID   uuid.UUID
}

func (q *Queries) UpdateEventDate(ctx context.Context, arg UpdateEventDateParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateEventDate, arg.Date, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateEventName = `-- name: UpdateEventName :one
UPDATE public.event
SET name = $1,
	updated_at = NOW()
WHERE id = $2
RETURNING id
`

type UpdateEventNameParams struct {
	Name sql.NullString
	ID   uuid.UUID
}

func (q *Queries) UpdateEventName(ctx context.Context, arg UpdateEventNameParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateEventName, arg.Name, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
