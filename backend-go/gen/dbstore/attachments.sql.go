// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: attachments.sql

package dbstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const attachmentCreate = `-- name: AttachmentCreate :one
INSERT INTO public.attachment (
    file_id,
    lang,
    name,
    extension,
    hash,
    mdata
)
VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, file_id, lang, name, extension, hash, mdata, created_at, updated_at
`

type AttachmentCreateParams struct {
	FileID    pgtype.UUID
	Lang      string
	Name      string
	Extension string
	Hash      string
	Mdata     []byte
}

func (q *Queries) AttachmentCreate(ctx context.Context, arg AttachmentCreateParams) (Attachment, error) {
	row := q.db.QueryRow(ctx, attachmentCreate,
		arg.FileID,
		arg.Lang,
		arg.Name,
		arg.Extension,
		arg.Hash,
		arg.Mdata,
	)
	var i Attachment
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.Lang,
		&i.Name,
		&i.Extension,
		&i.Hash,
		&i.Mdata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const attachmentGetById = `-- name: AttachmentGetById :one
SELECT id, file_id, lang, name, extension, hash, mdata, created_at, updated_at
FROM public.attachment
WHERE id = $1
`

func (q *Queries) AttachmentGetById(ctx context.Context, id uuid.UUID) (Attachment, error) {
	row := q.db.QueryRow(ctx, attachmentGetById, id)
	var i Attachment
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.Lang,
		&i.Name,
		&i.Extension,
		&i.Hash,
		&i.Mdata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const attachmentListByFileId = `-- name: AttachmentListByFileId :many
SELECT id, file_id, lang, name, extension, hash, mdata, created_at, updated_at
FROM public.attachment
WHERE file_id = $1
ORDER BY created_at DESC
`

func (q *Queries) AttachmentListByFileId(ctx context.Context, fileID pgtype.UUID) ([]Attachment, error) {
	rows, err := q.db.Query(ctx, attachmentListByFileId, fileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attachment
	for rows.Next() {
		var i Attachment
		if err := rows.Scan(
			&i.ID,
			&i.FileID,
			&i.Lang,
			&i.Name,
			&i.Extension,
			&i.Hash,
			&i.Mdata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const attachmentUpdate = `-- name: AttachmentUpdate :one
UPDATE public.attachment
SET
    lang = COALESCE($2, lang),
    name = COALESCE($3, name),
    extension = COALESCE($4, extension),
    hash = COALESCE($5, hash),
    mdata = COALESCE($6, mdata),
    updated_at = NOW()
WHERE
    id = $1
RETURNING id, file_id, lang, name, extension, hash, mdata, created_at, updated_at
`

type AttachmentUpdateParams struct {
	ID        uuid.UUID
	Lang      string
	Name      string
	Extension string
	Hash      string
	Mdata     []byte
}

func (q *Queries) AttachmentUpdate(ctx context.Context, arg AttachmentUpdateParams) (Attachment, error) {
	row := q.db.QueryRow(ctx, attachmentUpdate,
		arg.ID,
		arg.Lang,
		arg.Name,
		arg.Extension,
		arg.Hash,
		arg.Mdata,
	)
	var i Attachment
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.Lang,
		&i.Name,
		&i.Extension,
		&i.Hash,
		&i.Mdata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
