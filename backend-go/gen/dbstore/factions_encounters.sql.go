// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: factions_encounters.sql

package dbstore

import (
	"context"

	"github.com/google/uuid"
)

const createFactionsInEncounter = `-- name: CreateFactionsInEncounter :one
INSERT INTO public.relation_factions_encounters (
		encounter_id,
		faction_id,
		created_at,
		updated_at
	)
VALUES ($1, $2, NOW(), NOW())
RETURNING id
`

type CreateFactionsInEncounterParams struct {
	EncounterID uuid.UUID
	FactionID   uuid.UUID
}

func (q *Queries) CreateFactionsInEncounter(ctx context.Context, arg CreateFactionsInEncounterParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createFactionsInEncounter, arg.EncounterID, arg.FactionID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteEncounterFaction = `-- name: DeleteEncounterFaction :exec
DELETE FROM public.relation_factions_encounters
WHERE faction_id = $1
`

func (q *Queries) DeleteEncounterFaction(ctx context.Context, factionID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEncounterFaction, factionID)
	return err
}

const listEncountersThatIncludeFaction = `-- name: ListEncountersThatIncludeFaction :many
SELECT encounter_id
FROM public.relation_factions_encounters
WHERE faction_id = $1
`

func (q *Queries) ListEncountersThatIncludeFaction(ctx context.Context, factionID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, listEncountersThatIncludeFaction, factionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var encounter_id uuid.UUID
		if err := rows.Scan(&encounter_id); err != nil {
			return nil, err
		}
		items = append(items, encounter_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFactionsInEncounter = `-- name: ListFactionsInEncounter :one
SELECT faction_id
FROM public.relation_factions_encounters
WHERE encounter_id = $1
`

func (q *Queries) ListFactionsInEncounter(ctx context.Context, encounterID uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, listFactionsInEncounter, encounterID)
	var faction_id uuid.UUID
	err := row.Scan(&faction_id)
	return faction_id, err
}

const updateFactionInEncounter = `-- name: UpdateFactionInEncounter :one
UPDATE public.relation_factions_encounters
SET encounter_id = $1,
	faction_id = $2,
	updated_at = NOW()
WHERE id = $3
RETURNING id
`

type UpdateFactionInEncounterParams struct {
	EncounterID uuid.UUID
	FactionID   uuid.UUID
	ID          uuid.UUID
}

func (q *Queries) UpdateFactionInEncounter(ctx context.Context, arg UpdateFactionInEncounterParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateFactionInEncounter, arg.EncounterID, arg.FactionID, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
