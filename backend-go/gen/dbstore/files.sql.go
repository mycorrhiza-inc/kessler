// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: files.sql

package dbstore

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFile = `-- name: CreateFile :one
INSERT INTO public.file (
		url,
		doctype,
		lang,
		name,
		source,
		hash,
		mdata,
		stage,
		summary,
		short_summary,
		created_at,
		updated_at
	)
VALUES (
		$1,
		$2,
		$3,
		$4,
		$5,
		$6,
		$7,
		$8,
		$9,
		$10,
		NOW(),
		NOW()
	)
RETURNING id
`

type CreateFileParams struct {
	Url          sql.NullString
	Doctype      sql.NullString
	Lang         sql.NullString
	Name         sql.NullString
	Source       sql.NullString
	Hash         sql.NullString
	Mdata        sql.NullString
	Stage        sql.NullString
	Summary      sql.NullString
	ShortSummary sql.NullString
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createFile,
		arg.Url,
		arg.Doctype,
		arg.Lang,
		arg.Name,
		arg.Source,
		arg.Hash,
		arg.Mdata,
		arg.Stage,
		arg.Summary,
		arg.ShortSummary,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteFile = `-- name: DeleteFile :exec
DELETE FROM public.file
WHERE id = $1
`

func (q *Queries) DeleteFile(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFile, id)
	return err
}

const listFiles = `-- name: ListFiles :many
SELECT url, doctype, lang, name, source, hash, mdata, stage, summary, short_summary, id, created_at, updated_at
FROM public.file
ORDER BY created_at DESC
`

func (q *Queries) ListFiles(ctx context.Context) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, listFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.Url,
			&i.Doctype,
			&i.Lang,
			&i.Name,
			&i.Source,
			&i.Hash,
			&i.Mdata,
			&i.Stage,
			&i.Summary,
			&i.ShortSummary,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readFile = `-- name: ReadFile :one
SELECT url, doctype, lang, name, source, hash, mdata, stage, summary, short_summary, id, created_at, updated_at
FROM public.file
WHERE id = $1
`

func (q *Queries) ReadFile(ctx context.Context, id uuid.UUID) (File, error) {
	row := q.db.QueryRowContext(ctx, readFile, id)
	var i File
	err := row.Scan(
		&i.Url,
		&i.Doctype,
		&i.Lang,
		&i.Name,
		&i.Source,
		&i.Hash,
		&i.Mdata,
		&i.Stage,
		&i.Summary,
		&i.ShortSummary,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateFile = `-- name: UpdateFile :one
UPDATE public.file
SET url = $1,
	doctype = $2,
	lang = $3,
	name = $4,
	source = $5,
	hash = $6,
	mdata = $7,
	stage = $8,
	summary = $9,
	short_summary = $10,
	updated_at = NOW()
WHERE id = $11
RETURNING id
`

type UpdateFileParams struct {
	Url          sql.NullString
	Doctype      sql.NullString
	Lang         sql.NullString
	Name         sql.NullString
	Source       sql.NullString
	Hash         sql.NullString
	Mdata        sql.NullString
	Stage        sql.NullString
	Summary      sql.NullString
	ShortSummary sql.NullString
	ID           uuid.UUID
}

func (q *Queries) UpdateFile(ctx context.Context, arg UpdateFileParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateFile,
		arg.Url,
		arg.Doctype,
		arg.Lang,
		arg.Name,
		arg.Source,
		arg.Hash,
		arg.Mdata,
		arg.Stage,
		arg.Summary,
		arg.ShortSummary,
		arg.ID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
