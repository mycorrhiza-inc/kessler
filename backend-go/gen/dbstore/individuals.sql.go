// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: individuals.sql

package dbstore

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIndividual = `-- name: CreateIndividual :one
INSERT INTO public.individual (
		name,
		username,
		chosen_name,
		created_at,
		updated_at
	)
VALUES ($1, $2, $3, NOW(), NOW())
RETURNING name, username, chosen_name, id, created_at, updated_at
`

type CreateIndividualParams struct {
	Name       string
	Username   pgtype.Text
	ChosenName pgtype.Text
}

func (q *Queries) CreateIndividual(ctx context.Context, arg CreateIndividualParams) (Individual, error) {
	row := q.db.QueryRow(ctx, createIndividual, arg.Name, arg.Username, arg.ChosenName)
	var i Individual
	err := row.Scan(
		&i.Name,
		&i.Username,
		&i.ChosenName,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteIndividual = `-- name: DeleteIndividual :exec
DELETE FROM public.individual
WHERE id = $1
`

func (q *Queries) DeleteIndividual(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteIndividual, id)
	return err
}

const listIndividuals = `-- name: ListIndividuals :many
SELECT name, username, chosen_name, id, created_at, updated_at
FROM public.individual
ORDER BY created_at DESC
`

func (q *Queries) ListIndividuals(ctx context.Context) ([]Individual, error) {
	rows, err := q.db.Query(ctx, listIndividuals)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Individual
	for rows.Next() {
		var i Individual
		if err := rows.Scan(
			&i.Name,
			&i.Username,
			&i.ChosenName,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readIndividual = `-- name: ReadIndividual :one
SELECT name, username, chosen_name, id, created_at, updated_at
FROM public.individual
WHERE id = $1
`

func (q *Queries) ReadIndividual(ctx context.Context, id pgtype.UUID) (Individual, error) {
	row := q.db.QueryRow(ctx, readIndividual, id)
	var i Individual
	err := row.Scan(
		&i.Name,
		&i.Username,
		&i.ChosenName,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateIndividual = `-- name: UpdateIndividual :one
UPDATE public.individual
SET name = $1,
	username = $2,
	chosen_name = $3,
	updated_at = NOW()
WHERE id = $4
RETURNING name, username, chosen_name, id, created_at, updated_at
`

type UpdateIndividualParams struct {
	Name       string
	Username   pgtype.Text
	ChosenName pgtype.Text
	ID         pgtype.UUID
}

func (q *Queries) UpdateIndividual(ctx context.Context, arg UpdateIndividualParams) (Individual, error) {
	row := q.db.QueryRow(ctx, updateIndividual,
		arg.Name,
		arg.Username,
		arg.ChosenName,
		arg.ID,
	)
	var i Individual
	err := row.Scan(
		&i.Name,
		&i.Username,
		&i.ChosenName,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
