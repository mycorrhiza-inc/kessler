// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: dockets.sql

package dbstore

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addFileToDocket = `-- name: AddFileToDocket :exec
INSERT INTO public.docket_documents (docket_id, file_id, created_at, updated_at)
VALUES ($1, $2, NOW(), NOW())
`

type AddFileToDocketParams struct {
	DocketID pgtype.UUID
	FileID   pgtype.UUID
}

func (q *Queries) AddFileToDocket(ctx context.Context, arg AddFileToDocketParams) error {
	_, err := q.db.Exec(ctx, addFileToDocket, arg.DocketID, arg.FileID)
	return err
}

const createDocketConversation = `-- name: CreateDocketConversation :one
INSERT INTO public.docket_conversations (docket_id, created_at, updated_at)
SELECT $1,
	NOW(),
	NOW()
WHERE NOT EXISTS (
		SELECT 1
		FROM public.docket_conversations
		WHERE docket_id = $1
	)
RETURNING id
`

func (q *Queries) CreateDocketConversation(ctx context.Context, docketID string) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createDocketConversation, docketID)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const getDocketConversation = `-- name: GetDocketConversation :one
SELECT id, docket_id, state, created_at, updated_at, deleted_at
FROM public.docket_conversations
WHERE docket_id = $1
`

func (q *Queries) GetDocketConversation(ctx context.Context, docketID string) (DocketConversation, error) {
	row := q.db.QueryRow(ctx, getDocketConversation, docketID)
	var i DocketConversation
	err := row.Scan(
		&i.ID,
		&i.DocketID,
		&i.State,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const isDocumentInDocket = `-- name: IsDocumentInDocket :one
SELECT EXISTS (
		SELECT 1
		FROM public.docket_documents
		WHERE docket_id = $1
			AND file_id = $2
	)
`

type IsDocumentInDocketParams struct {
	DocketID pgtype.UUID
	FileID   pgtype.UUID
}

func (q *Queries) IsDocumentInDocket(ctx context.Context, arg IsDocumentInDocketParams) (bool, error) {
	row := q.db.QueryRow(ctx, isDocumentInDocket, arg.DocketID, arg.FileID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
