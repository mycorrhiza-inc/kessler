// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: documents_organizations.sql

package dbstore

import (
	"context"

	"github.com/google/uuid"
)

const associateDocumentWithOrganization = `-- name: AssociateDocumentWithOrganization :one
INSERT INTO public.relation_documents_organizations (
		document_id,
		organization_id,
		created_at,
		updated_at
	)
VALUES ($1, $2, NOW(), NOW())
RETURNING id
`

type AssociateDocumentWithOrganizationParams struct {
	DocumentID     uuid.UUID
	OrganizationID uuid.UUID
}

func (q *Queries) AssociateDocumentWithOrganization(ctx context.Context, arg AssociateDocumentWithOrganizationParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, associateDocumentWithOrganization, arg.DocumentID, arg.OrganizationID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteDocumentAssociatedWithOrganization = `-- name: DeleteDocumentAssociatedWithOrganization :one
DELETE FROM public.relation_documents_organizations
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteDocumentAssociatedWithOrganization(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, deleteDocumentAssociatedWithOrganization, id)
	err := row.Scan(&id)
	return id, err
}

const listDocumentIdsByOrganization = `-- name: ListDocumentIdsByOrganization :many
SELECT document_id
FROM public.relation_documents_organizations
WHERE organization_id = $1
`

func (q *Queries) ListDocumentIdsByOrganization(ctx context.Context, organizationID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, listDocumentIdsByOrganization, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var document_id uuid.UUID
		if err := rows.Scan(&document_id); err != nil {
			return nil, err
		}
		items = append(items, document_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrganizationIdsByDocument = `-- name: ListOrganizationIdsByDocument :many
SELECT organization_id
FROM public.relation_documents_organizations
WHERE document_id = $1
`

func (q *Queries) ListOrganizationIdsByDocument(ctx context.Context, documentID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, listOrganizationIdsByDocument, documentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var organization_id uuid.UUID
		if err := rows.Scan(&organization_id); err != nil {
			return nil, err
		}
		items = append(items, organization_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDocumentAssociatedWithOrganization = `-- name: UpdateDocumentAssociatedWithOrganization :exec
UPDATE public.relation_documents_organizations
SET document_id = $1,
	organization_id = $2,
	updated_at = NOW()
WHERE id = $3
RETURNING id
`

type UpdateDocumentAssociatedWithOrganizationParams struct {
	DocumentID     uuid.UUID
	OrganizationID uuid.UUID
	ID             uuid.UUID
}

func (q *Queries) UpdateDocumentAssociatedWithOrganization(ctx context.Context, arg UpdateDocumentAssociatedWithOrganizationParams) error {
	_, err := q.db.ExecContext(ctx, updateDocumentAssociatedWithOrganization, arg.DocumentID, arg.OrganizationID, arg.ID)
	return err
}
