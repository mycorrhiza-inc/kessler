// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: individuals_factions.sql

package dbstore

import (
	"context"

	"github.com/google/uuid"
)

const createIndividualsInFaction = `-- name: CreateIndividualsInFaction :one
INSERT INTO public.relation_individuals_factions (
		faction_id,
		individual_id,
		created_at,
		updated_at
	)
VALUES ($1, $2, NOW(), NOW())
RETURNING id
`

type CreateIndividualsInFactionParams struct {
	FactionID    uuid.UUID
	IndividualID uuid.UUID
}

func (q *Queries) CreateIndividualsInFaction(ctx context.Context, arg CreateIndividualsInFactionParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createIndividualsInFaction, arg.FactionID, arg.IndividualID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteIndividualsInFaction = `-- name: DeleteIndividualsInFaction :exec
DELETE FROM public.relation_individuals_factions
WHERE id = $1
`

func (q *Queries) DeleteIndividualsInFaction(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteIndividualsInFaction, id)
	return err
}

const listIndividualsInFaction = `-- name: ListIndividualsInFaction :many
SELECT faction_id, individual_id, id, created_at, updated_at
FROM public.relation_individuals_factions
ORDER BY created_at DESC
`

func (q *Queries) ListIndividualsInFaction(ctx context.Context) ([]RelationIndividualsFaction, error) {
	rows, err := q.db.QueryContext(ctx, listIndividualsInFaction)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RelationIndividualsFaction
	for rows.Next() {
		var i RelationIndividualsFaction
		if err := rows.Scan(
			&i.FactionID,
			&i.IndividualID,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readIndividualsInFaction = `-- name: ReadIndividualsInFaction :one
SELECT faction_id, individual_id, id, created_at, updated_at
FROM public.relation_individuals_factions
WHERE id = $1
`

func (q *Queries) ReadIndividualsInFaction(ctx context.Context, id uuid.UUID) (RelationIndividualsFaction, error) {
	row := q.db.QueryRowContext(ctx, readIndividualsInFaction, id)
	var i RelationIndividualsFaction
	err := row.Scan(
		&i.FactionID,
		&i.IndividualID,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateIndividualsInFaction = `-- name: UpdateIndividualsInFaction :one
UPDATE public.relation_individuals_factions
SET faction_id = $1,
	individual_id = $2,
	updated_at = NOW()
WHERE id = $3
RETURNING id
`

type UpdateIndividualsInFactionParams struct {
	FactionID    uuid.UUID
	IndividualID uuid.UUID
	ID           uuid.UUID
}

func (q *Queries) UpdateIndividualsInFaction(ctx context.Context, arg UpdateIndividualsInFactionParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateIndividualsInFaction, arg.FactionID, arg.IndividualID, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
