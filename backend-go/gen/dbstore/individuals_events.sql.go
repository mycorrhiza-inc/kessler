// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: individuals_events.sql

package dbstore

import (
	"context"

	"github.com/google/uuid"
)

const createIndividualsAssociatedWithEvent = `-- name: CreateIndividualsAssociatedWithEvent :one
INSERT INTO public.relation_individuals_events (
		individual_id,
		event_id,
		created_at,
		updated_at
	)
VALUES ($1, $2, NOW(), NOW())
RETURNING id
`

type CreateIndividualsAssociatedWithEventParams struct {
	IndividualID uuid.UUID
	EventID      uuid.UUID
}

func (q *Queries) CreateIndividualsAssociatedWithEvent(ctx context.Context, arg CreateIndividualsAssociatedWithEventParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createIndividualsAssociatedWithEvent, arg.IndividualID, arg.EventID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteIndividualEventConnection = `-- name: DeleteIndividualEventConnection :exec
DELETE FROM public.relation_individuals_events
WHERE individual_id = $1
	AND event_id = $2
`

type DeleteIndividualEventConnectionParams struct {
	IndividualID uuid.UUID
	EventID      uuid.UUID
}

func (q *Queries) DeleteIndividualEventConnection(ctx context.Context, arg DeleteIndividualEventConnectionParams) error {
	_, err := q.db.ExecContext(ctx, deleteIndividualEventConnection, arg.IndividualID, arg.EventID)
	return err
}

const getEventsAssociatedWithIndividual = `-- name: GetEventsAssociatedWithIndividual :one
SELECT event_id
FROM public.relation_individuals_events
WHERE individual_id = $1
`

func (q *Queries) GetEventsAssociatedWithIndividual(ctx context.Context, individualID uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getEventsAssociatedWithIndividual, individualID)
	var event_id uuid.UUID
	err := row.Scan(&event_id)
	return event_id, err
}

const getIndividualEventId = `-- name: GetIndividualEventId :one
SELECT id
FROM public.relation_individuals_events
WHERE individual_id = $1
	AND event_id = $2
`

type GetIndividualEventIdParams struct {
	IndividualID uuid.UUID
	EventID      uuid.UUID
}

func (q *Queries) GetIndividualEventId(ctx context.Context, arg GetIndividualEventIdParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getIndividualEventId, arg.IndividualID, arg.EventID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getIndividualsAssociatedWithEvent = `-- name: GetIndividualsAssociatedWithEvent :one
SELECT individual_id
FROM public.relation_individuals_events
WHERE event_id = $1
`

func (q *Queries) GetIndividualsAssociatedWithEvent(ctx context.Context, eventID uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getIndividualsAssociatedWithEvent, eventID)
	var individual_id uuid.UUID
	err := row.Scan(&individual_id)
	return individual_id, err
}
