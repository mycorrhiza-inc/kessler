// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: deduplication.sql

package dbstore

import (
	"context"

	"github.com/google/uuid"
)

const conversationDeduplicateCascade = `-- name: ConversationDeduplicateCascade :exec
WITH update_documents AS (
    UPDATE
        public.docket_documents
    SET
        docket_id = $2
    WHERE
        docket_id = $1
    RETURNING
        1
)
DELETE FROM
    public.docket_conversations
WHERE
    id = $1
`

type ConversationDeduplicateCascadeParams struct {
	ID       uuid.UUID
	DocketID uuid.UUID
}

func (q *Queries) ConversationDeduplicateCascade(ctx context.Context, arg ConversationDeduplicateCascadeParams) error {
	_, err := q.db.Exec(ctx, conversationDeduplicateCascade, arg.ID, arg.DocketID)
	return err
}

const organizationDeduplicateCascade = `-- name: OrganizationDeduplicateCascade :exec
WITH update_authorship AS (
    UPDATE
        public.relation_documents_organizations_authorship
    SET
        organization_id = $2
    WHERE
        organization_id = $1
    RETURNING
        1
),
update_aliases AS (
    UPDATE
        public.organization_aliases
    SET
        organization_id = $2
    WHERE
        organization_id = $1
    RETURNING
        1
)
DELETE FROM
    public.organization
WHERE
    public.organization.id = $1
`

type OrganizationDeduplicateCascadeParams struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
}

func (q *Queries) OrganizationDeduplicateCascade(ctx context.Context, arg OrganizationDeduplicateCascadeParams) error {
	_, err := q.db.Exec(ctx, organizationDeduplicateCascade, arg.ID, arg.OrganizationID)
	return err
}
