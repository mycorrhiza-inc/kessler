// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: juristictions.sql

package dbstore

import (
	"context"

	"github.com/google/uuid"
)

const juristictionFileFetch = `-- name: JuristictionFileFetch :many
SELECT
    id, country, state, municipality, agency, proceeding_name, extra, created_at, updated_at
FROM
    public.juristiction_information
WHERE
    id = $1
`

func (q *Queries) JuristictionFileFetch(ctx context.Context, id uuid.UUID) ([]JuristictionInformation, error) {
	rows, err := q.db.Query(ctx, juristictionFileFetch, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JuristictionInformation
	for rows.Next() {
		var i JuristictionInformation
		if err := rows.Scan(
			&i.ID,
			&i.Country,
			&i.State,
			&i.Municipality,
			&i.Agency,
			&i.ProceedingName,
			&i.Extra,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const juristictionFileInsert = `-- name: JuristictionFileInsert :one
INSERT INTO
    public.juristiction_information (
        id,
        country,
        state,
        municipality,
        agency,
        proceeding_name,
        extra,
        created_at,
        updated_at
    )
VALUES
    ($1, $2, $3, $4, $5, $6, $7, NOW(), NOW())
RETURNING
    id
`

type JuristictionFileInsertParams struct {
	ID             uuid.UUID
	Country        string
	State          string
	Municipality   string
	Agency         string
	ProceedingName string
	Extra          []byte
}

func (q *Queries) JuristictionFileInsert(ctx context.Context, arg JuristictionFileInsertParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, juristictionFileInsert,
		arg.ID,
		arg.Country,
		arg.State,
		arg.Municipality,
		arg.Agency,
		arg.ProceedingName,
		arg.Extra,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const juristictionFileUpdate = `-- name: JuristictionFileUpdate :one
UPDATE
    public.juristiction_information
SET
    country = $1,
    state = $2,
    municipality = $3,
    agency = $4,
    proceeding_name = $5,
    extra = $6,
    updated_at = NOW()
WHERE
    id = $7
RETURNING
    id
`

type JuristictionFileUpdateParams struct {
	Country        string
	State          string
	Municipality   string
	Agency         string
	ProceedingName string
	Extra          []byte
	ID             uuid.UUID
}

func (q *Queries) JuristictionFileUpdate(ctx context.Context, arg JuristictionFileUpdateParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, juristictionFileUpdate,
		arg.Country,
		arg.State,
		arg.Municipality,
		arg.Agency,
		arg.ProceedingName,
		arg.Extra,
		arg.ID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
