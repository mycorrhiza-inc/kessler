// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: file_text.sql

package dbstore

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFileTextSource = `-- name: CreateFileTextSource :one
INSERT INTO public.file_text_source (
		file_id,
		is_original_text,
		language,
		text,
		created_at,
		updated_at
	)
VALUES ($1, $2, $3, $4, NOW(), NOW())
RETURNING id
`

type CreateFileTextSourceParams struct {
	FileID         uuid.UUID
	IsOriginalText bool
	Language       string
	Text           sql.NullString
}

func (q *Queries) CreateFileTextSource(ctx context.Context, arg CreateFileTextSourceParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createFileTextSource,
		arg.FileID,
		arg.IsOriginalText,
		arg.Language,
		arg.Text,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteFileTexts = `-- name: DeleteFileTexts :exec
DELETE FROM public.file_text_source
WHERE file_id = $1
`

func (q *Queries) DeleteFileTexts(ctx context.Context, fileID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFileTexts, fileID)
	return err
}

const getFileLanguage = `-- name: GetFileLanguage :one
SELECT language
FROM public.file_text_source
WHERE file_id = $1
`

func (q *Queries) GetFileLanguage(ctx context.Context, fileID uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getFileLanguage, fileID)
	var language string
	err := row.Scan(&language)
	return language, err
}

const getFileText = `-- name: GetFileText :one
SELECT text
FROM public.file_text_source
WHERE file_id = $1
`

func (q *Queries) GetFileText(ctx context.Context, fileID uuid.UUID) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getFileText, fileID)
	var text sql.NullString
	err := row.Scan(&text)
	return text, err
}

const listTextsOfFile = `-- name: ListTextsOfFile :many
SELECT file_id, is_original_text, language, text, id, created_at, updated_at
FROM public.file_text_source
WHERE file_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListTextsOfFile(ctx context.Context, fileID uuid.UUID) ([]FileTextSource, error) {
	rows, err := q.db.QueryContext(ctx, listTextsOfFile, fileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FileTextSource
	for rows.Next() {
		var i FileTextSource
		if err := rows.Scan(
			&i.FileID,
			&i.IsOriginalText,
			&i.Language,
			&i.Text,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFileTextLanguage = `-- name: UpdateFileTextLanguage :one
UPDATE public.file_text_source
SET language = $1,
	updated_at = NOW()
WHERE file_id = $2
RETURNING id
`

type UpdateFileTextLanguageParams struct {
	Language string
	FileID   uuid.UUID
}

func (q *Queries) UpdateFileTextLanguage(ctx context.Context, arg UpdateFileTextLanguageParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateFileTextLanguage, arg.Language, arg.FileID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateFileTextSource = `-- name: UpdateFileTextSource :one
UPDATE public.file_text_source
SET text = $1,
	updated_at = NOW()
WHERE id = $2
RETURNING id
`

type UpdateFileTextSourceParams struct {
	Text sql.NullString
	ID   uuid.UUID
}

func (q *Queries) UpdateFileTextSource(ctx context.Context, arg UpdateFileTextSourceParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateFileTextSource, arg.Text, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateIsNotOriginalText = `-- name: UpdateIsNotOriginalText :one
UPDATE public.file_text_source
SET is_original_text = $1,
	updated_at = NOW()
WHERE id = $2
RETURNING id
`

type UpdateIsNotOriginalTextParams struct {
	IsOriginalText bool
	ID             uuid.UUID
}

func (q *Queries) UpdateIsNotOriginalText(ctx context.Context, arg UpdateIsNotOriginalTextParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateIsNotOriginalText, arg.IsOriginalText, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
