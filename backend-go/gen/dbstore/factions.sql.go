// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: factions.sql

package dbstore

import (
	"context"

	"github.com/google/uuid"
)

const createFaction = `-- name: CreateFaction :one
INSERT INTO public.faction (
		name,
		description,
		created_at,
		updated_at
	)
VALUES ($1, $2, NOW(), NOW())
RETURNING id
`

type CreateFactionParams struct {
	Name        string
	Description string
}

func (q *Queries) CreateFaction(ctx context.Context, arg CreateFactionParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createFaction, arg.Name, arg.Description)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteFaction = `-- name: DeleteFaction :exec
DELETE FROM public.faction
WHERE id = $1
`

func (q *Queries) DeleteFaction(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFaction, id)
	return err
}

const listFactions = `-- name: ListFactions :many
SELECT name, description, id, created_at, updated_at
FROM public.faction
ORDER BY created_at DESC
`

func (q *Queries) ListFactions(ctx context.Context) ([]Faction, error) {
	rows, err := q.db.QueryContext(ctx, listFactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Faction
	for rows.Next() {
		var i Faction
		if err := rows.Scan(
			&i.Name,
			&i.Description,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readFaction = `-- name: ReadFaction :one
SELECT name, description, id, created_at, updated_at
FROM public.faction
WHERE id = $1
`

func (q *Queries) ReadFaction(ctx context.Context, id uuid.UUID) (Faction, error) {
	row := q.db.QueryRowContext(ctx, readFaction, id)
	var i Faction
	err := row.Scan(
		&i.Name,
		&i.Description,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateFaction = `-- name: UpdateFaction :one
UPDATE public.faction
SET name = $1,
	description = $2,
	updated_at = NOW()
WHERE id = $3
RETURNING id
`

type UpdateFactionParams struct {
	Name        string
	Description string
	ID          uuid.UUID
}

func (q *Queries) UpdateFaction(ctx context.Context, arg UpdateFactionParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateFaction, arg.Name, arg.Description, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateFactionDescription = `-- name: UpdateFactionDescription :one
UPDATE public.faction
SET description = $1,
	updated_at = NOW()
WHERE id = $2
RETURNING id
`

type UpdateFactionDescriptionParams struct {
	Description string
	ID          uuid.UUID
}

func (q *Queries) UpdateFactionDescription(ctx context.Context, arg UpdateFactionDescriptionParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateFactionDescription, arg.Description, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateFactionName = `-- name: UpdateFactionName :one
UPDATE public.faction
SET name = $1,
	updated_at = NOW()
WHERE id = $2
RETURNING id
`

type UpdateFactionNameParams struct {
	Name string
	ID   uuid.UUID
}

func (q *Queries) UpdateFactionName(ctx context.Context, arg UpdateFactionNameParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateFactionName, arg.Name, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
