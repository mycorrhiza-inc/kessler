// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: individuals_organizations.sql

package dbstore

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIndividualsCurrentlyAssociatedWithOrganization = `-- name: CreateIndividualsCurrentlyAssociatedWithOrganization :one
INSERT INTO public.relation_individuals_organizations (
		individual_id,
		organization_id,
		created_at,
		updated_at
	)
VALUES ($1, $2, NOW(), NOW())
RETURNING id
`

type CreateIndividualsCurrentlyAssociatedWithOrganizationParams struct {
	IndividualID   pgtype.UUID
	OrganizationID pgtype.UUID
}

func (q *Queries) CreateIndividualsCurrentlyAssociatedWithOrganization(ctx context.Context, arg CreateIndividualsCurrentlyAssociatedWithOrganizationParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createIndividualsCurrentlyAssociatedWithOrganization, arg.IndividualID, arg.OrganizationID)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteIndividualsCurrentlyAssociatedWithOrganization = `-- name: DeleteIndividualsCurrentlyAssociatedWithOrganization :exec
DELETE FROM public.relation_individuals_organizations
WHERE id = $1
`

func (q *Queries) DeleteIndividualsCurrentlyAssociatedWithOrganization(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteIndividualsCurrentlyAssociatedWithOrganization, id)
	return err
}

const listIndividualsCurrentlyAssociatedWithOrganization = `-- name: ListIndividualsCurrentlyAssociatedWithOrganization :many
SELECT individual_id, organization_id, id, created_at, updated_at
FROM public.relation_individuals_organizations
WHERE organization_id = $1
`

func (q *Queries) ListIndividualsCurrentlyAssociatedWithOrganization(ctx context.Context, organizationID pgtype.UUID) ([]RelationIndividualsOrganization, error) {
	rows, err := q.db.Query(ctx, listIndividualsCurrentlyAssociatedWithOrganization, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RelationIndividualsOrganization
	for rows.Next() {
		var i RelationIndividualsOrganization
		if err := rows.Scan(
			&i.IndividualID,
			&i.OrganizationID,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIndividualsCurrentlyAssociatedWithOrganization = `-- name: UpdateIndividualsCurrentlyAssociatedWithOrganization :one
UPDATE public.relation_individuals_organizations
SET individual_id = $1,
	organization_id = $2,
	updated_at = NOW()
WHERE id = $3
RETURNING id
`

type UpdateIndividualsCurrentlyAssociatedWithOrganizationParams struct {
	IndividualID   pgtype.UUID
	OrganizationID pgtype.UUID
	ID             pgtype.UUID
}

func (q *Queries) UpdateIndividualsCurrentlyAssociatedWithOrganization(ctx context.Context, arg UpdateIndividualsCurrentlyAssociatedWithOrganizationParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, updateIndividualsCurrentlyAssociatedWithOrganization, arg.IndividualID, arg.OrganizationID, arg.ID)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}
