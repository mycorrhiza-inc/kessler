// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: documents_encouters.sql

package dbstore

import (
	"context"

	"github.com/google/uuid"
)

const addDocumentToEncounter = `-- name: AddDocumentToEncounter :one
INSERT INTO public.relation_documents_encounters (
		document_id,
		encounter_id,
		created_at,
		updated_at
	)
VALUES ($1, $2, NOW(), NOW())
RETURNING document_id, encounter_id, id, created_at, updated_at
`

type AddDocumentToEncounterParams struct {
	DocumentID  uuid.UUID
	EncounterID uuid.UUID
}

func (q *Queries) AddDocumentToEncounter(ctx context.Context, arg AddDocumentToEncounterParams) (RelationDocumentsEncounter, error) {
	row := q.db.QueryRowContext(ctx, addDocumentToEncounter, arg.DocumentID, arg.EncounterID)
	var i RelationDocumentsEncounter
	err := row.Scan(
		&i.DocumentID,
		&i.EncounterID,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDocumentsInEncounter = `-- name: DeleteDocumentsInEncounter :one
DELETE FROM public.relation_documents_encounters
WHERE id = $1
RETURNING document_id, encounter_id, id, created_at, updated_at
`

func (q *Queries) DeleteDocumentsInEncounter(ctx context.Context, id uuid.UUID) (RelationDocumentsEncounter, error) {
	row := q.db.QueryRowContext(ctx, deleteDocumentsInEncounter, id)
	var i RelationDocumentsEncounter
	err := row.Scan(
		&i.DocumentID,
		&i.EncounterID,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listDocumentsInEncounter = `-- name: ListDocumentsInEncounter :many
SELECT document_id
FROM public.relation_documents_encounters
WHERE encounter_id = $1
`

func (q *Queries) ListDocumentsInEncounter(ctx context.Context, encounterID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, listDocumentsInEncounter, encounterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var document_id uuid.UUID
		if err := rows.Scan(&document_id); err != nil {
			return nil, err
		}
		items = append(items, document_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
