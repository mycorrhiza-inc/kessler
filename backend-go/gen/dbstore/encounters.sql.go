// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: encounters.sql

package dbstore

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createEncounter = `-- name: CreateEncounter :one
INSERT INTO public.encounter (
		name,
		description,
		created_at,
		updated_at
	)
VALUES ($1, $2, NOW(), NOW())
RETURNING name, description, id, created_at, updated_at
`

type CreateEncounterParams struct {
	Name        sql.NullString
	Description sql.NullString
}

func (q *Queries) CreateEncounter(ctx context.Context, arg CreateEncounterParams) (Encounter, error) {
	row := q.db.QueryRowContext(ctx, createEncounter, arg.Name, arg.Description)
	var i Encounter
	err := row.Scan(
		&i.Name,
		&i.Description,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEncounter = `-- name: DeleteEncounter :exec
DELETE FROM public.encounter
WHERE id = $1
`

func (q *Queries) DeleteEncounter(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEncounter, id)
	return err
}

const getEncounter = `-- name: GetEncounter :one
SELECT name, description, id, created_at, updated_at
FROM public.encounter
WHERE id = $1
`

func (q *Queries) GetEncounter(ctx context.Context, id uuid.UUID) (Encounter, error) {
	row := q.db.QueryRowContext(ctx, getEncounter, id)
	var i Encounter
	err := row.Scan(
		&i.Name,
		&i.Description,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEncounters = `-- name: ListEncounters :many
SELECT name, description, id, created_at, updated_at
FROM public.encounter
ORDER BY created_at DESC
`

func (q *Queries) ListEncounters(ctx context.Context) ([]Encounter, error) {
	rows, err := q.db.QueryContext(ctx, listEncounters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Encounter
	for rows.Next() {
		var i Encounter
		if err := rows.Scan(
			&i.Name,
			&i.Description,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEncounter = `-- name: UpdateEncounter :exec
UPDATE public.encounter
SET name = $1,
	description = $2,
	updated_at = NOW()
WHERE id = $3
`

type UpdateEncounterParams struct {
	Name        sql.NullString
	Description sql.NullString
	ID          uuid.UUID
}

func (q *Queries) UpdateEncounter(ctx context.Context, arg UpdateEncounterParams) error {
	_, err := q.db.ExecContext(ctx, updateEncounter, arg.Name, arg.Description, arg.ID)
	return err
}

const updateEncounterDescription = `-- name: UpdateEncounterDescription :exec
UPDATE public.encounter
SET description = $1,
	updated_at = NOW()
WHERE id = $2
`

type UpdateEncounterDescriptionParams struct {
	Description sql.NullString
	ID          uuid.UUID
}

func (q *Queries) UpdateEncounterDescription(ctx context.Context, arg UpdateEncounterDescriptionParams) error {
	_, err := q.db.ExecContext(ctx, updateEncounterDescription, arg.Description, arg.ID)
	return err
}

const updateEncounterName = `-- name: UpdateEncounterName :exec
UPDATE public.encounter
SET name = $1,
	updated_at = NOW()
WHERE id = $2
`

type UpdateEncounterNameParams struct {
	Name sql.NullString
	ID   uuid.UUID
}

func (q *Queries) UpdateEncounterName(ctx context.Context, arg UpdateEncounterNameParams) error {
	_, err := q.db.ExecContext(ctx, updateEncounterName, arg.Name, arg.ID)
	return err
}
