// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: quickwit_materialized_view.sql

package dbstore

import (
	"context"
)

const filePrecomputedQuickwitListGetPaginated = `-- name: FilePrecomputedQuickwitListGetPaginated :many
SELECT
  id, name, extension, lang, verified, hash, created_at, updated_at, date_published, mdata, extra_obj, conversation_uuid, docket_gov_id, file_text, organizations
FROM
  public.testmat
LIMIT
    $1 OFFSET $2
`

type FilePrecomputedQuickwitListGetPaginatedParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) FilePrecomputedQuickwitListGetPaginated(ctx context.Context, arg FilePrecomputedQuickwitListGetPaginatedParams) ([]Testmat, error) {
	rows, err := q.db.Query(ctx, filePrecomputedQuickwitListGetPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Testmat
	for rows.Next() {
		var i Testmat
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Extension,
			&i.Lang,
			&i.Verified,
			&i.Hash,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DatePublished,
			&i.Mdata,
			&i.ExtraObj,
			&i.ConversationUuid,
			&i.DocketGovID,
			&i.FileText,
			&i.Organizations,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
