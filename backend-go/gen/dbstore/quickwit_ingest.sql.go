// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: quickwit_ingest.sql

package dbstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const conversationCompleteQuickwitListGet = `-- name: ConversationCompleteQuickwitListGet :many
SELECT
    public.docket_conversations.id,
    public.docket_conversations.docket_gov_id,
    public.docket_conversations.state,
    public.docket_conversations.name,
    public.docket_conversations.description,
    public.docket_conversations.matter_type,
    public.docket_conversations.industry_type,
    public.docket_conversations.metadata,
    public.docket_conversations.extra,
    public.docket_conversations.date_published,
    public.docket_conversations.created_at,
    public.docket_conversations.updated_at,
    COUNT(public.docket_documents.file_id) AS total_documents
FROM
    public.docket_conversations
    LEFT JOIN public.docket_documents ON public.docket_conversations.id = public.docket_documents.conversation_uuid
GROUP BY
    docket_conversations.id,
    docket_conversations.docket_gov_id,
    docket_conversations.state,
    docket_conversations.name,
    docket_conversations.description,
    docket_conversations.matter_type,
    docket_conversations.industry_type,
    docket_conversations.metadata,
    docket_conversations.extra,
    docket_conversations.date_published,
    docket_conversations.created_at,
    docket_conversations.updated_at
`

type ConversationCompleteQuickwitListGetRow struct {
	ID             uuid.UUID
	DocketGovID    string
	State          string
	Name           string
	Description    string
	MatterType     string
	IndustryType   string
	Metadata       string
	Extra          string
	DatePublished  pgtype.Timestamptz
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	TotalDocuments int64
}

func (q *Queries) ConversationCompleteQuickwitListGet(ctx context.Context) ([]ConversationCompleteQuickwitListGetRow, error) {
	rows, err := q.db.Query(ctx, conversationCompleteQuickwitListGet)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ConversationCompleteQuickwitListGetRow
	for rows.Next() {
		var i ConversationCompleteQuickwitListGetRow
		if err := rows.Scan(
			&i.ID,
			&i.DocketGovID,
			&i.State,
			&i.Name,
			&i.Description,
			&i.MatterType,
			&i.IndustryType,
			&i.Metadata,
			&i.Extra,
			&i.DatePublished,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalDocuments,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const organizationCompleteQuickwitListGet = `-- name: OrganizationCompleteQuickwitListGet :many
SELECT
    public.organization.id,
    public.organization.name,
    public.organization.description,
    public.organization.is_person,
    COUNT(
        public.relation_documents_organizations_authorship.document_id
    ) AS total_documents_authored,
    array_agg(
        public.organization_aliases.organization_alias
        ORDER BY
            public.organization_aliases.organization_alias
    ) :: VARCHAR [] AS organization_aliases
FROM
    public.organization
    LEFT JOIN public.organization_aliases ON public.organization.id = public.organization_aliases.organization_id
    LEFT JOIN public.relation_documents_organizations_authorship ON public.organization.id = public.relation_documents_organizations_authorship.organization_id
GROUP BY
    organization.id,
    organization.name,
    organization.description,
    organization.is_person
`

type OrganizationCompleteQuickwitListGetRow struct {
	ID                     uuid.UUID
	Name                   string
	Description            string
	IsPerson               pgtype.Bool
	TotalDocumentsAuthored int64
	OrganizationAliases    []string
}

func (q *Queries) OrganizationCompleteQuickwitListGet(ctx context.Context) ([]OrganizationCompleteQuickwitListGetRow, error) {
	rows, err := q.db.Query(ctx, organizationCompleteQuickwitListGet)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrganizationCompleteQuickwitListGetRow
	for rows.Next() {
		var i OrganizationCompleteQuickwitListGetRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IsPerson,
			&i.TotalDocumentsAuthored,
			&i.OrganizationAliases,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const semiCompleteFileQuickwitListGet = `-- name: SemiCompleteFileQuickwitListGet :many
SELECT
    public.file.id,
    public.file.name,
    public.file.extension,
    public.file.lang,
    public.file.verified,
    public.file.hash,
    public.file.created_at,
    public.file.updated_at,
    public.file.date_published,
    public.file_metadata.mdata,
    public.file_extras.extra_obj,
    public.docket_documents.conversation_uuid,
    public.docket_conversations.docket_gov_id,
    array_agg(
        public.organization.id
        ORDER BY
            public.organization.id
    ) :: uuid [] AS organization_ids,
    array_agg(
        public.organization.name
        ORDER BY
            public.organization.id
    ) :: text [] AS organization_names,
    array_agg(
        public.organization.is_person
        ORDER BY
            public.organization.id
    ) :: boolean [] AS is_person_list,
    array_agg(
        public.file_text_source.text
        ORDER BY
            public.file_text_source.id
    ) :: VARCHAR [] AS file_texts,
    array_agg(
        public.file_text_source.language
        ORDER BY
            public.file_text_source.id
    ) :: VARCHAR [] AS file_text_languages
FROM
    public.file
    LEFT JOIN public.file_metadata ON public.file.id = public.file_metadata.id
    LEFT JOIN public.file_extras ON public.file.id = public.file_extras.id
    LEFT JOIN public.docket_documents ON public.file.id = public.docket_documents.file_id
    LEFT JOIN public.docket_conversations ON public.docket_documents.conversation_uuid = public.docket_conversations.id
    LEFT JOIN public.relation_documents_organizations_authorship ON public.file.id = public.relation_documents_organizations_authorship.document_id
    LEFT JOIN public.organization ON public.relation_documents_organizations_authorship.organization_id = public.organization.id
GROUP BY
    FILE.id,
    FILE.name,
    FILE.extension,
    FILE.lang,
    FILE.verified,
    FILE.hash,
    FILE.created_at,
    FILE.updated_at,
    FILE.date_published,
    file_metadata.mdata,
    file_extras.extra_obj,
    docket_documents.conversation_uuid,
    docket_conversations.docket_gov_id
`

type SemiCompleteFileQuickwitListGetRow struct {
	ID                uuid.UUID
	Name              string
	Extension         string
	Lang              string
	Verified          pgtype.Bool
	Hash              string
	CreatedAt         pgtype.Timestamptz
	UpdatedAt         pgtype.Timestamptz
	DatePublished     pgtype.Timestamptz
	Mdata             []byte
	ExtraObj          []byte
	ConversationUuid  pgtype.UUID
	DocketGovID       pgtype.Text
	OrganizationIds   []uuid.UUID
	OrganizationNames []string
	IsPersonList      []bool
	FileTexts         []string
	FileTextLanguages []string
}

func (q *Queries) SemiCompleteFileQuickwitListGet(ctx context.Context) ([]SemiCompleteFileQuickwitListGetRow, error) {
	rows, err := q.db.Query(ctx, semiCompleteFileQuickwitListGet)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SemiCompleteFileQuickwitListGetRow
	for rows.Next() {
		var i SemiCompleteFileQuickwitListGetRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Extension,
			&i.Lang,
			&i.Verified,
			&i.Hash,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DatePublished,
			&i.Mdata,
			&i.ExtraObj,
			&i.ConversationUuid,
			&i.DocketGovID,
			&i.OrganizationIds,
			&i.OrganizationNames,
			&i.IsPersonList,
			&i.FileTexts,
			&i.FileTextLanguages,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const semiCompleteFileQuickwitListGetPaginated = `-- name: SemiCompleteFileQuickwitListGetPaginated :many
SELECT
    public.file.id,
    public.file.name,
    public.file.extension,
    public.file.lang,
    public.file.verified,
    public.file.hash,
    public.file.created_at,
    public.file.updated_at,
    public.file.date_published,
    public.file_metadata.mdata,
    public.file_extras.extra_obj,
    public.docket_documents.conversation_uuid,
    public.docket_conversations.docket_gov_id,
    array_agg(
        public.organization.id
        ORDER BY
            public.organization.id
    ) :: uuid [] AS organization_ids,
    array_agg(
        public.organization.name
        ORDER BY
            public.organization.id
    ) :: text [] AS organization_names,
    array_agg(
        public.organization.is_person
        ORDER BY
            public.organization.id
    ) :: boolean [] AS is_person_list,
    array_agg(
        public.file_text_source.text
        ORDER BY
            public.file_text_source.id
    ) :: VARCHAR [] AS file_texts,
    array_agg(
        public.file_text_source.language
        ORDER BY
            public.file_text_source.id
    ) :: VARCHAR [] AS file_text_languages
FROM
    public.file
    LEFT JOIN public.file_metadata ON public.file.id = public.file_metadata.id
    LEFT JOIN public.file_extras ON public.file.id = public.file_extras.id
    LEFT JOIN public.docket_documents ON public.file.id = public.docket_documents.file_id
    LEFT JOIN public.docket_conversations ON public.docket_documents.conversation_uuid = public.docket_conversations.id
    LEFT JOIN public.relation_documents_organizations_authorship ON public.file.id = public.relation_documents_organizations_authorship.document_id
    LEFT JOIN public.organization ON public.relation_documents_organizations_authorship.organization_id = public.organization.id
GROUP BY
    FILE.id,
    FILE.name,
    FILE.extension,
    FILE.lang,
    FILE.verified,
    FILE.hash,
    FILE.created_at,
    FILE.updated_at,
    FILE.date_published,
    file_metadata.mdata,
    file_extras.extra_obj,
    docket_documents.conversation_uuid,
    docket_conversations.docket_gov_id
LIMIT
    $1 OFFSET $2
`

type SemiCompleteFileQuickwitListGetPaginatedParams struct {
	Limit  int32
	Offset int32
}

type SemiCompleteFileQuickwitListGetPaginatedRow struct {
	ID                uuid.UUID
	Name              string
	Extension         string
	Lang              string
	Verified          pgtype.Bool
	Hash              string
	CreatedAt         pgtype.Timestamptz
	UpdatedAt         pgtype.Timestamptz
	DatePublished     pgtype.Timestamptz
	Mdata             []byte
	ExtraObj          []byte
	ConversationUuid  pgtype.UUID
	DocketGovID       pgtype.Text
	OrganizationIds   []uuid.UUID
	OrganizationNames []string
	IsPersonList      []bool
	FileTexts         []string
	FileTextLanguages []string
}

func (q *Queries) SemiCompleteFileQuickwitListGetPaginated(ctx context.Context, arg SemiCompleteFileQuickwitListGetPaginatedParams) ([]SemiCompleteFileQuickwitListGetPaginatedRow, error) {
	rows, err := q.db.Query(ctx, semiCompleteFileQuickwitListGetPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SemiCompleteFileQuickwitListGetPaginatedRow
	for rows.Next() {
		var i SemiCompleteFileQuickwitListGetPaginatedRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Extension,
			&i.Lang,
			&i.Verified,
			&i.Hash,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DatePublished,
			&i.Mdata,
			&i.ExtraObj,
			&i.ConversationUuid,
			&i.DocketGovID,
			&i.OrganizationIds,
			&i.OrganizationNames,
			&i.IsPersonList,
			&i.FileTexts,
			&i.FileTextLanguages,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
