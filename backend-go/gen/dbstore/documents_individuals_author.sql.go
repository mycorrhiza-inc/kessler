// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: documents_individuals_author.sql

package dbstore

import (
	"context"

	"github.com/google/uuid"
)

const getDocumentAuthors = `-- name: GetDocumentAuthors :many
SELECT individual_id
FROM public.relation_documents_individuals_author
WHERE document_id = $1
`

func (q *Queries) GetDocumentAuthors(ctx context.Context, documentID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getDocumentAuthors, documentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var individual_id uuid.UUID
		if err := rows.Scan(&individual_id); err != nil {
			return nil, err
		}
		items = append(items, individual_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const linkDocumentToIndividual = `-- name: LinkDocumentToIndividual :one
INSERT INTO public.relation_documents_individuals_author (
		document_id,
		individual_id,
		created_at,
		updated_at
	)
VALUES ($1, $2, NOW(), NOW())
RETURNING document_id, individual_id, id, created_at, updated_at
`

type LinkDocumentToIndividualParams struct {
	DocumentID   uuid.UUID
	IndividualID uuid.UUID
}

func (q *Queries) LinkDocumentToIndividual(ctx context.Context, arg LinkDocumentToIndividualParams) (RelationDocumentsIndividualsAuthor, error) {
	row := q.db.QueryRowContext(ctx, linkDocumentToIndividual, arg.DocumentID, arg.IndividualID)
	var i RelationDocumentsIndividualsAuthor
	err := row.Scan(
		&i.DocumentID,
		&i.IndividualID,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listDocumentsAuthoredByIndividual = `-- name: ListDocumentsAuthoredByIndividual :many
SELECT document_id, individual_id, id, created_at, updated_at
FROM public.relation_documents_individuals_author
WHERE individual_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListDocumentsAuthoredByIndividual(ctx context.Context, individualID uuid.UUID) ([]RelationDocumentsIndividualsAuthor, error) {
	rows, err := q.db.QueryContext(ctx, listDocumentsAuthoredByIndividual, individualID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RelationDocumentsIndividualsAuthor
	for rows.Next() {
		var i RelationDocumentsIndividualsAuthor
		if err := rows.Scan(
			&i.DocumentID,
			&i.IndividualID,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unlinkDocumentFromIndividual = `-- name: UnlinkDocumentFromIndividual :exec
DELETE FROM public.relation_documents_individuals_author
WHERE document_id = $1
	AND individual_id = $2
`

type UnlinkDocumentFromIndividualParams struct {
	DocumentID   uuid.UUID
	IndividualID uuid.UUID
}

func (q *Queries) UnlinkDocumentFromIndividual(ctx context.Context, arg UnlinkDocumentFromIndividualParams) error {
	_, err := q.db.ExecContext(ctx, unlinkDocumentFromIndividual, arg.DocumentID, arg.IndividualID)
	return err
}
