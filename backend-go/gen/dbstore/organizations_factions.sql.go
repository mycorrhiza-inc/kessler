// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: organizations_factions.sql

package dbstore

import (
	"context"

	"github.com/google/uuid"
)

const createOrganizationsInFaction = `-- name: CreateOrganizationsInFaction :one
INSERT INTO public.relation_organizations_factions (
		faction_id,
		organization_id,
		created_at,
		updated_at
	)
VALUES ($1, $2, NOW(), NOW())
RETURNING id
`

type CreateOrganizationsInFactionParams struct {
	FactionID      uuid.UUID
	OrganizationID uuid.UUID
}

func (q *Queries) CreateOrganizationsInFaction(ctx context.Context, arg CreateOrganizationsInFactionParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createOrganizationsInFaction, arg.FactionID, arg.OrganizationID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteOrganizationsInFaction = `-- name: DeleteOrganizationsInFaction :exec
DELETE FROM public.relation_organizations_factions
WHERE id = $1
`

func (q *Queries) DeleteOrganizationsInFaction(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOrganizationsInFaction, id)
	return err
}

const listOrganizationsInFaction = `-- name: ListOrganizationsInFaction :many
SELECT faction_id, organization_id, id, created_at, updated_at
FROM public.relation_organizations_factions
ORDER BY created_at DESC
`

func (q *Queries) ListOrganizationsInFaction(ctx context.Context) ([]RelationOrganizationsFaction, error) {
	rows, err := q.db.QueryContext(ctx, listOrganizationsInFaction)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RelationOrganizationsFaction
	for rows.Next() {
		var i RelationOrganizationsFaction
		if err := rows.Scan(
			&i.FactionID,
			&i.OrganizationID,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readOrganizationsInFaction = `-- name: ReadOrganizationsInFaction :one
SELECT faction_id, organization_id, id, created_at, updated_at
FROM public.relation_organizations_factions
WHERE id = $1
`

func (q *Queries) ReadOrganizationsInFaction(ctx context.Context, id uuid.UUID) (RelationOrganizationsFaction, error) {
	row := q.db.QueryRowContext(ctx, readOrganizationsInFaction, id)
	var i RelationOrganizationsFaction
	err := row.Scan(
		&i.FactionID,
		&i.OrganizationID,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOrganizationsInFaction = `-- name: UpdateOrganizationsInFaction :one
UPDATE public.relation_organizations_factions
SET faction_id = $1,
	organization_id = $2,
	updated_at = NOW()
WHERE id = $3
RETURNING id
`

type UpdateOrganizationsInFactionParams struct {
	FactionID      uuid.UUID
	OrganizationID uuid.UUID
	ID             uuid.UUID
}

func (q *Queries) UpdateOrganizationsInFaction(ctx context.Context, arg UpdateOrganizationsInFactionParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateOrganizationsInFaction, arg.FactionID, arg.OrganizationID, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
