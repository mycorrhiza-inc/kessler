// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: organization_events.sql

package dbstore

import (
	"context"

	"github.com/google/uuid"
)

const createOrganizationsAssociatedWithEvent = `-- name: CreateOrganizationsAssociatedWithEvent :one
INSERT INTO public.relation_organizations_events (
		organization_id,
		event_id,
		created_at,
		updated_at
	)
VALUES ($1, $2, NOW(), NOW())
RETURNING id
`

type CreateOrganizationsAssociatedWithEventParams struct {
	OrganizationID uuid.UUID
	EventID        uuid.UUID
}

func (q *Queries) CreateOrganizationsAssociatedWithEvent(ctx context.Context, arg CreateOrganizationsAssociatedWithEventParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createOrganizationsAssociatedWithEvent, arg.OrganizationID, arg.EventID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteOrganizationsAssociatedWithEvent = `-- name: DeleteOrganizationsAssociatedWithEvent :exec
DELETE FROM public.relation_organizations_events
WHERE id = $1
`

func (q *Queries) DeleteOrganizationsAssociatedWithEvent(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOrganizationsAssociatedWithEvent, id)
	return err
}

const listOrganizationsAssociatedWithEvent = `-- name: ListOrganizationsAssociatedWithEvent :many
SELECT organization_id, event_id, id, created_at, updated_at
FROM public.relation_organizations_events
ORDER BY created_at DESC
`

func (q *Queries) ListOrganizationsAssociatedWithEvent(ctx context.Context) ([]RelationOrganizationsEvent, error) {
	rows, err := q.db.QueryContext(ctx, listOrganizationsAssociatedWithEvent)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RelationOrganizationsEvent
	for rows.Next() {
		var i RelationOrganizationsEvent
		if err := rows.Scan(
			&i.OrganizationID,
			&i.EventID,
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readOrganizationsAssociatedWithEvent = `-- name: ReadOrganizationsAssociatedWithEvent :one
SELECT organization_id, event_id, id, created_at, updated_at
FROM public.relation_organizations_events
WHERE id = $1
`

func (q *Queries) ReadOrganizationsAssociatedWithEvent(ctx context.Context, id uuid.UUID) (RelationOrganizationsEvent, error) {
	row := q.db.QueryRowContext(ctx, readOrganizationsAssociatedWithEvent, id)
	var i RelationOrganizationsEvent
	err := row.Scan(
		&i.OrganizationID,
		&i.EventID,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOrganizationsAssociatedWithEvent = `-- name: UpdateOrganizationsAssociatedWithEvent :one
UPDATE public.relation_organizations_events
SET organization_id = $1,
	event_id = $2,
	updated_at = NOW()
WHERE id = $3
RETURNING id
`

type UpdateOrganizationsAssociatedWithEventParams struct {
	OrganizationID uuid.UUID
	EventID        uuid.UUID
	ID             uuid.UUID
}

func (q *Queries) UpdateOrganizationsAssociatedWithEvent(ctx context.Context, arg UpdateOrganizationsAssociatedWithEventParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateOrganizationsAssociatedWithEvent, arg.OrganizationID, arg.EventID, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
