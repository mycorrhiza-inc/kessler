# local development docker compose
services:
  frontend:
    hostname: "app.kessler.xyz"
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
    env_file:
      - config/global.env
    volumes:
      - ./config/frontend.env.local:/app/.env.local
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
    expose:
      - 3000
    command:
      - "npm"
      - "run"
      - "dev"
      #      - "--"
      #      - "--hostname"
      #      - "${domain:-127.0.0.1}"

  reverse-proxy:
    # official image
    image: traefik:v2.11
    # eable web ui, listen to docker
    command: 
      - "--api.insecure=true"
      - "--providers.docker"
      - "--accesslog=true"
      # funnel the logs
      - "--accesslog.filePath=/logs/access.log"

    ports:
      - "80:80"
      - "${PROXY_UI_PORT:-8083}:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${VOLUMES_DIRECTORY:-./volumes}/logs/proxy:/logs/

  backend:
    build:
      context: ./backend
      dockerfile: ./Dockerfile
    env_file:
      - config/global.env
    environment:
      - MILVUS_DEV_DIR=/tmp/milvus/
    volumes:
      - ./backend:/app
      - ${VOLUMES_DIRECTORY:-./volumes}/instance:/app/instance
      - ${VOLUMES_DIRECTORY:-./volumes}/files:/files
      - ${VOLUMES_DIRECTORY:-./volumes}/logs/api:/logs/

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/api/`) || PathPrefix(`/schema/`)"
    command:
      # - "python"
      # - "rag/postgres_example.py"
      - "uvicorn"
      - "main:app"
      - "--host"
      - "0.0.0.0"
      - "--port"
      - "5505"
      - "--workers"
      - "4"
      - "--reload"
    expose:
      - 5505

  database:
    image: pgvector/pgvector:pg16
    restart: always
    ports:
      - "6543:5432"
    env_file:
      - config/global.env
    expose:
      - "5432"
    volumes:
      - ${VOLUMES_DIRECTORY:-./volumes}/pgdata:/var/lib/postgresql/data
      - ${VOLUMES_DIRECTORY:-./volumes}/logs/db:/logs/

  vector:
    image: timberio/vector:0.40.0-debian
    ports: 
      - "8686:8686"
    volumes:
      - ${VOLUMES_DIRECTORY:-./volumes}/logs/:/var/logs/
      - ./vector.yaml:/etc/vector/vector.yaml:ro 

  quickwit:
      image: quickwit/quickwit
      environment:
        QW_ENABLE_OPENTELEMETRY_OTLP_EXPORTER: "true"
        OTEL_EXPORTER_OTLP_ENDPOINT: "http://localhost:7281"
      ports:
        - 7280:7280
      expose:
        - 7280
      command: ["run"]

  grafana:
      image: grafana/grafana-oss
      container_name: grafana
      ports:
        - "${MAP_HOST_GRAFANA:-127.0.0.1}:3000:3000"
      environment:
        GF_INSTALL_PLUGINS: https://github.com/quickwit-oss/quickwit-datasource/releases/download/v0.4.6/quickwit-quickwit-datasource-0.4.6.zip;quickwit-quickwit-datasource
        GF_AUTH_DISABLE_LOGIN_FORM: "true"
        GF_AUTH_ANONYMOUS_ENABLED: "true"
        GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
  valkey:
    container_name: valkey
    hostname: valkey
    image: valkey/valkey:7.2.5
    volumes:
      - ./volumes/valkey.conf:/etc/valkey/valkey.conf
      - ./volumes/valkey-data:/data
    command: valkey-server /etc/valkey/valkey.conf
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    expose:
      - 6379
    ports:
      - 6379:6379
