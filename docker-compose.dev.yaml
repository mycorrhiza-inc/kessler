# local development docker compose
services:
  frontend:
    hostname: "app.kessler.xyz"
    build:
      context: ./frontend
      dockerfile: ./Dockerfile-dev
    env_file:
      - config/global.env
    volumes:
      - ./config/frontend.env.local:/app/.env.local
      - ./config/global.env:/app/.env
      - ./frontend/src/:/app/src
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
    expose:
      - 3000
    command:
      - "npm"
      - "run"
      - "dev"

  reverse-proxy:
    image: traefik:v3.1.2
    command: >
      --api.insecure=true
      --providers.docker

    # --tracing.otlp=true
    # --tracing.otlp.http=true
    # --tracing.otlp.http.endpoint=http://jaeger:4318/v1/traces
    expose:
      - 80
      - 443
    ports:
      - "80:80"
      - "${PROXY_UI_PORT:-8083}:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  #   depends_on:
  #     - jaeger
  #   environment:
  #     - OTEL_PROPAGATORS=b3,jaeger
  #
  # jaeger:
  #   image: jaegertracing/all-in-one:1.27
  #   ports:
  #     - "5775:5775/udp"
  #     - "6831:6831/udp"
  #     - "6832:6832/udp"
  #     - "14250:14250"
  #     - "16686:16686"
  #     - "14268:14268"
  #     - "4318:4318" # OpenTelemetry Default HTTP Port
  #     - "9411:9411"
  backend-go:
    build:
      context: ./backend-go/
      dockerfile: ./Dockerfile
    command:
      - "go"
      - "run"
      - "main.go"
    expose:
      - 4041
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.go-backend.rule=PathPrefix(`/api/v2`)"
      - "traefik.http.middlewares.test-stripprefix.stripprefix.prefixes=/api/v2"
  backend-python:
    build:
      context: ./backend-python/
      dockerfile: ./Dockerfile
    env_file:
      - config/global.env
    environment:
      - MILVUS_DEV_DIR=/tmp/milvus/
    volumes:
      - ./backend-python:/app
      - ${VOLUMES_DIRECTORY:-./volumes}/instance:/app/instance
      - ${VOLUMES_DIRECTORY:-./volumes}/files:/files
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend-python.rule=PathPrefix(`/api/v1`) || PathPrefix(`/schema/`)"
    command:
      - "uvicorn"
      - "main:app"
      - "--host"
      - "0.0.0.0"
      - "--port"
      - "5505"
      - "--workers"
      - "4"
      - "--reload"
    expose:
      - 5505
  thaumaturgy-python:
    build:
      context: ./thaumaturgy-python/
      dockerfile: ./Dockerfile
    env_file:
      - config/global.env
    environment:
      - MILVUS_DEV_DIR=/tmp/milvus/
    volumes:
      - ./thaumaturgy-python/:/app
      - ${VOLUMES_DIRECTORY:-./volumes}/instance:/app/instance
      - ${VOLUMES_DIRECTORY:-./volumes}/files:/files
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.thaumaturgy-python.rule=PathPrefix(`/alchemy/v1/`) "
    command:
      - "uvicorn"
      - "main:app"
      - "--host"
      - "0.0.0.0"
      - "--port"
      - "5505"
      - "--workers"
      - "4"
      - "--reload"
    expose:
      - 5505

  valkey:
    container_name: valkey
    hostname: valkey
    image: valkey/valkey:7.2.5
    volumes:
      - ./volumes/valkey.conf:/etc/valkey/valkey.conf
      - ./volumes/valkey-data:/data
    command: valkey-server /etc/valkey/valkey.conf
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    expose:
      - 6379
    ports:
      - 6379:6379

  # mage:
  #   image: mageai/mageai:latest
  #   command: mage start mage-code
  #   env_file:
  #     - .env
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   environment:
  #     USER_CODE_PATH: /mage-code
  #     POSTGRES_DBNAME: ${POSTGRES_DBNAME:-postgres}
  #     POSTGRES_SCHEMA: ${POSTGRES_SCHEMA:-public}
  #     POSTGRES_USER: ${POSTGRES_USER:-postgres}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_HOST: ${POSTGRES_HOST}
  #     POSTGRES_PORT: ${POSTGRES_PORT:-5432}
  #   ports:
  #     - 6789:6789
  #   volumes:
  #     - ./mage-code:/home/src/mage-code
  #   restart: on-failure:5

  # database:
  #   image: pgvector/pgvector:pg16
  #   restart: always
  #   ports:
  #     - "6543:5432"
  #   env_file:
  #     - config/global.env
  #   expose:
  #     - "5432"
  #   volumes:
  #     - ${VOLUMES_DIRECTORY:-./volumes}/pgdata:/var/lib/postgresql/data
